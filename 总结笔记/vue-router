路由守卫 —— 组件外 
    router.beforeEach：
        router.beforeEach((to, from, next) => {
            console.log('全局前置守卫：beforeEach -- next需要调用')
            next()
        })
        

    router.afterEach：
        在所有路由跳转结束的时候调用
        可以添加百度流量统计

路由守卫 —— 组件内：
    beforeRouteEnter：
        beforeRouteEnter (to, from, next) {
            // 这里还无法访问到组件实例，this === undefined
            next( vm => {
                // 通过 `vm` 访问组件实例
            })
        }

    beforeRouteUpdate：
        在路由参数变更时可以重新获取数据

    beforeRouteLeave
        导航离开该组件的对应路由时调用，可以访问组件实例 this             

流程：
    beforeEach:       全局前置守卫
    beforeEnter：      路由守卫
    beforeRouteEnter： 组件路由守卫，this并不指向该组件
    beforerResolve:    全局解析守卫
    afterEach：        全局后置守卫
    beforeCreate：     
    created
    beforeMount
    mouted
    boforeRouteEnter：  next回调



路由守卫：
    全局&路由独享：router.beforeEach   router.beforeResolve    router.afterEach router.beforeEnter 
    组件内：beforeRouteEnter、beforeRouteUpdate (2.2 新增)、beforeRouteLeave
    
Created：vue实例被生成后的一个生命周期钩子函数。(页面初始化数据加载一般写这里);
beforeCreate：给个loading界面 created撤销loading;
beforeDestory：你确认删除XX吗？
destoryed：当前组件已被删除，清空相关内容

const routes = [
    { 
        name:'home', 
        path: '/home/:id', 
        props:true,     //可以直接在组件内用props接收id  
        props:｛ ID:235 ｝,
        props:(route) => {
            a:route.query.a     //  /add?a=1&b=2    // 1   组件内用props接收a
            b:route.query.b     //  /add?a=1&b=2    // 2   组件内用props接收b
        }
        component: Home,
        redirect:'/' ,
        children:[    // 有子路由的时候  在父组件那里需要加<route-view></route-view> 
            
        ]
    },
    {path: '/about', component: About }]

const router = new VueRouter({
    routes,
    mode:'history',
    base:'/base/',       /base/home  不是强制性的  /home依然可以访问
    linkActiveClass:'active-link',               ／app         父级   class='active-link'
    linkExactActiveClass:'exact-active-link',    /app/child  子级     class='active-link exact-active-link'
    scrollBehavior(to,from,savedPosition){
        //savedPosition  会记录滚动条滚动的位置
        if(savedPosition){
            return savedPosition
        }else{
            return {x:0,y:0}
        }
    },
    fallback:true,      ／／不是所有浏览器都支持单页面的history  设置true  自动处理成hash的方式
    parseQuery(query){

    },  
    stringifyQuery(obj){

    }
})  


const app = new Vue({router}).$mount('#app')
点击 router-link 标签 ，寻找 to 属性 ，与路由表对应，找到组件 ，最后把组件渲染到占位符 <router-view> 标签
<router-view name＝'a'>

组建内可以用 this.$route 
    this.$route.path
    this.$route.params   /:id
    this.$route.query    /add?user=1
    this.$route.hash     
    this.$route.fullPath
    this.$route.matched      一个数组，包含当前路由的所有嵌套路径片段的路由记录 。
    this.$route.name 
    this.$route.redirectedFrom  重定向
 
vue-router两种传参:
        params - name   不展示
        query - path    浏览器地址栏中显示参数
            this.$router.push({
                name:"detail",
                params:{
                    name:'nameValue',
                    code:10011
                }
            });

            :to="{
                path: '/food', 
                query: {
                    geohash, 
                    title: foodItem.title, 
                    restaurant_category_id: getCategoryId(foodItem.link)
                },
                meata:{
                    title:'my title',
                    description:'这是一家怎么怎么样的公司'
                }
            }" 