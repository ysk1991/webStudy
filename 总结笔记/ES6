var
    存在变量提升 ： 虽然变量还没有被声明，但是我们却可以使用这个未被声明的变量
let
     变量并不会被挂载到 window 上  不能重复定义
const    
    基本数据类型的变量是不可以修改
    object是可以修改的
    


模块化：
    好处：解决命名冲突／提供复用性／提高代码可维护性
    AMD:加载模块完毕可以使用
    CMD:按需加载
    CommonJs:在node使用，require()
    ES6模块化:
        import XXX from './a.js'
        import { XXX } from './a.js'
        // 导出模块 API
        export function a() {}
        export default function() {}


let    const    ...array     ()=>{}       let {a,b}={a:1,b=2}       
`我是字符串模板，里面可以放${price}`        arr.map({})  arr.froEach({})  arr.filter({})
 

 数组去重：
    es6的方法：
        function unique(arr) {
            return Array.from(new Set(arr))
        } 
        [...new Set(arr)]




箭头函数不能使用的情况：
        定义对象方法
        回调函数
        原型函数
        定义构造函数    






原型继承与es6继承区别：
    组合继承：
        调用了父类构造函数，导致子类的原型上多了不需要的父类属性，存在内存上的浪费。   
        function Child(value) {
            Parent.call(this, value)
        }
        Child.prototype = new Parent()
    寄生组合继承：
        对组合继承进行了优化， 
        function Child(value) {
            Parent.call(this, value)
        }
        父类的原型赋值给了子类，并且将构造函数设置为子类，这样既解决了无用的父类属性问题，
        还能正确的找到子类的构造函数。
        Child.prototype = Object.create(Parent.prototype, {
            constructor: {
                value: Child,
                enumerable: false
            }
        })

ES6继承：
    class 实现继承的核心在于使用 extends 表明继承自哪个父类，
    并且在子类构造函数中必须调用 super，
    因为这段代码可以看成 Parent.call(this, value)。
class本质是什么：（是函数）
    class Person {}
    Person instanceof Function // true        
 

数组扩展方法
    以下均不会改变原来数组
    map：遍历原数组，将每个元素拿出来做一些变换然后放入到新的数组中。
    filter：在遍历数组的时候将返回值为 true 的元素放入新数组，我们可以利用这个函数删除一些不需要的元素
    reduce：    
        元素全部相加得到一个值
        第一个参数：前两个相加的和 暂存在了acc current当前的需要被加的值
        const arr = [1, 2, 3]
        const sum = arr.reduce((acc, current) => acc + current, 0)
        console.log(sum)


字符串模板：
    ｀我是${name}变量｀        

const str = 'superman'
const subStr = 'super'
console.log(str.includes(subStr))  // true    
当然除此之外还有两个特殊的方法，它们的用法和includes()一样：
startWith()：如果在字符串的起始部分检测到指定文本则返回true
endsWith()：如果在字符串的结束部分检测到指定文本则返回true

导入整个文件
    import 'test'
整体加载
    import * as test from 'test'
按需导入
    import { deDuplication, fix } from 'test'
遇到出口为 export { foo as default, foo1, foo2 }
    import foo, { foo1, foo2 } from 'foos'